package main

import (
	"encoding/json"
	"fmt"
	"math/rand"
	"os"
	"strings"
	"sync"
	"time"
)

type Person struct {
	ID          int
	Name        string
	Age         int
	Profession  string
	Hobbies     []string
	Friends     []*Person
	City        string
	Salary      float64
	IsMarried   bool
	Children    int
	Pets        []Pet
	Skills      map[string]int
	Education   []Education
	SocialMedia SocialMedia
	mutex       sync.Mutex
}

type Pet struct {
	Name     string
	Type     string
	Age      int
	Favorite bool
}

type Education struct {
	Institution string
	Degree      string
	Year        int
	GPA         float64
}

type SocialMedia struct {
	Facebook  string
	Instagram string
	Twitter   string
	LinkedIn  string
}

type Network struct {
	People     []*Person
	Statistics NetworkStats
	mutex      sync.RWMutex
}

type NetworkStats struct {
	TotalConnections int
	AverageAge       float64
	PopularHobbies   map[string]int
	PopularCities    map[string]int
}

func (p *Person) AddFriend(friend *Person) {
	p.mutex.Lock()
	defer p.mutex.Unlock()

	for _, f := range p.Friends {
		if f.ID == friend.ID {
			return
		}
	}
	p.Friends = append(p.Friends, friend)
}

func (p *Person) RemoveFriend(friendID int) {
	p.mutex.Lock()
	defer p.mutex.Unlock()

	for i, friend := range p.Friends {
		if friend.ID == friendID {
			p.Friends = append(p.Friends[:i], p.Friends[i+1:]...)
			return
		}
	}
}

func (p *Person) Introduce() {
	fmt.Printf("\nüåü –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s üåü\n", p.Name)
	fmt.Printf("ID: %d\n", p.ID)
	fmt.Printf("–ò–º—è: %s (%d –ª–µ—Ç)\n", p.Name, p.Age)
	fmt.Printf("–ì–æ—Ä–æ–¥: %s\n", p.City)
	fmt.Printf("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: %s (–ó–∞—Ä–ø–ª–∞—Ç–∞: %.2f‚ÇΩ)\n", p.Profession, p.Salary)
	fmt.Printf("–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: %s\n", map[bool]string{true: "–í –±—Ä–∞–∫–µ", false: "–ù–µ –∂–µ–Ω–∞—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º"}[p.IsMarried])
	fmt.Printf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: %d\n", p.Children)

	if len(p.Hobbies) > 0 {
		fmt.Println("\nüìö –•–æ–±–±–∏:")
		for _, hobby := range p.Hobbies {
			fmt.Printf("- %s\n", hobby)
		}
	}

	if len(p.Pets) > 0 {
		fmt.Println("\nüêæ –ü–∏—Ç–æ–º—Ü—ã:")
		for _, pet := range p.Pets {
			fmt.Printf("- %s (%s, %d –ª–µ—Ç)%s\n",
				pet.Name,
				pet.Type,
				pet.Age,
				map[bool]string{true: " ‚ù§Ô∏è", false: ""}[pet.Favorite])
		}
	}

	fmt.Println("\nüéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:")
	for _, edu := range p.Education {
		fmt.Printf("- %s, %s (%d) - GPA: %.2f\n",
			edu.Institution,
			edu.Degree,
			edu.Year,
			edu.GPA)
	}

	fmt.Println("\nüí™ –ù–∞–≤—ã–∫–∏:")
	for skill, level := range p.Skills {
		fmt.Printf("- %s: %s\n", skill, strings.Repeat("‚≠ê", level))
	}
}

func (p *Person) ShowFriends() {
	p.mutex.Lock()
	defer p.mutex.Unlock()

	if len(p.Friends) == 0 {
		fmt.Println("\nüò¢ –£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π")
		return
	}

	fmt.Printf("\nüë• –î—Ä—É–∑—å—è (%d):\n", len(p.Friends))
	for _, friend := range p.Friends {
		fmt.Printf("- %s (%d –ª–µ—Ç) - %s –∏–∑ %s\n",
			friend.Name,
			friend.Age,
			friend.Profession,
			friend.City)
	}
}

func (n *Network) CalculateStatistics() {
	n.mutex.Lock()
	defer n.mutex.Unlock()

	stats := NetworkStats{
		PopularHobbies: make(map[string]int),
		PopularCities:  make(map[string]int),
	}

	totalAge := 0
	connections := 0

	for _, person := range n.People {
		totalAge += person.Age
		connections += len(person.Friends)

		for _, hobby := range person.Hobbies {
			stats.PopularHobbies[hobby]++
		}
		stats.PopularCities[person.City]++
	}

	stats.TotalConnections = connections
	stats.AverageAge = float64(totalAge) / float64(len(n.People))

	n.Statistics = stats
}

func CreateRandomPerson(id int) *Person {
	names := []string{"–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ú–∞—Ä–∏—è", "–ò–≤–∞–Ω", "–ï–ª–µ–Ω–∞", "–î–º–∏—Ç—Ä–∏–π", "–ê–Ω–Ω–∞", "–°–µ—Ä–≥–µ–π", "–û–ª—å–≥–∞", "–ú–∏—Ö–∞–∏–ª", "–¢–∞—Ç—å—è–Ω–∞"}
	surnames := []string{"–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–°–º–∏—Ä–Ω–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤", "–ü–æ–ø–æ–≤", "–í–∞—Å–∏–ª—å–µ–≤", "–°–æ–∫–æ–ª–æ–≤"}
	professions := []string{"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–£—á–∏—Ç–µ–ª—å", "–í—Ä–∞—á", "–ò–Ω–∂–µ–Ω–µ—Ä", "–•—É–¥–æ–∂–Ω–∏–∫", "–î–∏–∑–∞–π–Ω–µ—Ä", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", "–ú–µ–Ω–µ–¥–∂–µ—Ä"}
	hobbies := []string{"–ß—Ç–µ–Ω–∏–µ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–°–ø–æ—Ä—Ç", "–ú—É–∑—ã–∫–∞", "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ô–æ–≥–∞", "–†–∏—Å–æ–≤–∞–Ω–∏–µ"}
	cities := []string{"–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"}
	petNames := []string{"–ë–∞—Ä—Å–∏–∫", "–ú—É—Ä–∫–∞", "–®–∞—Ä–∏–∫", "–†–µ–∫—Å", "–ü—É—à–æ–∫", "–õ—é—Å—è"}
	petTypes := []string{"–ö–æ—Ç", "–°–æ–±–∞–∫–∞", "–•–æ–º—è–∫", "–ü–æ–ø—É–≥–∞–π"}
	institutions := []string{"–ú–ì–£", "–°–ü–ë–ì–£", "–ú–§–¢–ò", "–í–®–≠", "–ú–ì–¢–£"}
	degrees := []string{"–ë–∞–∫–∞–ª–∞–≤—Ä", "–ú–∞–≥–∏—Å—Ç—Ä", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ê—Å–ø–∏—Ä–∞–Ω—Ç"}
	skills := []string{"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏"}

	rand.Seed(time.Now().UnixNano())

	person := &Person{
		ID:         id,
		Name:       names[rand.Intn(len(names))] + " " + surnames[rand.Intn(len(surnames))],
		Age:        rand.Intn(40) + 20,
		Profession: professions[rand.Intn(len(professions))],
		City:       cities[rand.Intn(len(cities))],
		Salary:     float64(rand.Intn(150000) + 50000),
		IsMarried:  rand.Float32() < 0.5,
		Children:   rand.Intn(3),
		Hobbies:    make([]string, 0),
		Pets:       make([]Pet, 0),
		Skills:     make(map[string]int),
		Education:  make([]Education, 0),
		SocialMedia: SocialMedia{
			Facebook:  fmt.Sprintf("fb.com/user%d", id),
			Instagram: fmt.Sprintf("instagram.com/user%d", id),
			Twitter:   fmt.Sprintf("twitter.com/user%d", id),
			LinkedIn:  fmt.Sprintf("linkedin.com/in/user%d", id),
		},
	}

	numHobbies := rand.Intn(4) + 1
	for i := 0; i < numHobbies; i++ {
		hobby := hobbies[rand.Intn(len(hobbies))]
		if !contains(person.Hobbies, hobby) {
			person.Hobbies = append(person.Hobbies, hobby)
		}
	}

	numPets := rand.Intn(3)
	for i := 0; i < numPets; i++ {
		pet := Pet{
			Name:     petNames[rand.Intn(len(petNames))],
			Type:     petTypes[rand.Intn(len(petTypes))],
			Age:      rand.Intn(10) + 1,
			Favorite: i == 0,
		}
		person.Pets = append(person.Pets, pet)
	}

	numEducations := rand.Intn(2) + 1
	for i := 0; i < numEducations; i++ {
		education := Education{
			Institution: institutions[rand.Intn(len(institutions))],
			Degree:      degrees[rand.Intn(len(degrees))],
			Year:        2010 + rand.Intn(13),
			GPA:         4.0 * rand.Float64(),
		}
		person.Education = append(person.Education, education)
	}

	numSkills := rand.Intn(4) + 2
	for i := 0; i < numSkills; i++ {
		skill := skills[rand.Intn(len(skills))]
		if _, exists := person.Skills[skill]; !exists {
			person.Skills[skill] = rand.Intn(5) + 1
		}
	}

	return person
}

func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}

func SaveNetworkToFile(network *Network, filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	return encoder.Encode(network)
}

func LoadNetworkFromFile(filename string) (*Network, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var network Network
	decoder := json.NewDecoder(file)
	err = decoder.Decode(&network)
	return &network, err
}

func main() {
	network := &Network{}

	numPeople := 20
	network.People = make([]*Person, numPeople)

	var wg sync.WaitGroup
	wg.Add(numPeople)

	for i := 0; i < numPeople; i++ {
		go func(index int) {
			defer wg.Done()
			network.People[index] = CreateRandomPerson(index)
		}(i)
	}

	wg.Wait()

	for i := 0; i < len(network.People); i++ {
		numFriends := rand.Intn(5) + 2
		for j := 0; j < numFriends; j++ {
			friendIndex := rand.Intn(len(network.People))
			if friendIndex != i {
				network.People[i].AddFriend(network.People[friendIndex])
			}
		}
	}

	network.CalculateStatistics()

	fmt.Println("üåê === –°–û–¶–ò–ê–õ–¨–ù–ê–Ø –°–ï–¢–¨ ===")
	fmt.Printf("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏:\n")
	fmt.Printf("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n", len(network.People))
	fmt.Printf("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π: %d\n", network.Statistics.TotalConnections)
	fmt.Printf("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: %.1f –ª–µ—Ç\n", network.Statistics.AverageAge)

	fmt.Println("\nüèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ö–æ–±–±–∏:")
	for hobby, count := range network.Statistics.PopularHobbies {
		fmt.Printf("- %s: %d —á–µ–ª–æ–≤–µ–∫\n", hobby, count)
	}

	fmt.Println("\nüè¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º:")
	for city, count := range network.Statistics.PopularCities {
		fmt.Printf("- %s: %d —á–µ–ª–æ–≤–µ–∫\n", city, count)
	}

	fmt.Println("\nüë• === –ü–†–û–§–ò–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===")
	for _, person := range network.People {
		person.Introduce()
		person.ShowFriends()
		fmt.Println("\n" + strings.Repeat("=", 50))
	}

	err := SaveNetworkToFile(network, "social_network.json")
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ç–∏: %v\n", err)
	} else {
		fmt.Println("\nüíæ –°–µ—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª social_network.json")
	}
}
